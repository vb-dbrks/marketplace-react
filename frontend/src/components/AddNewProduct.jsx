import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Grid,
  Paper,
  Alert,
  Snackbar,
  Stack,
  Link
} from '@mui/material';
import {
  Save as SaveIcon,
  Cancel as CancelIcon,
  Home as HomeIcon,
  Edit as EditIcon
} from '@mui/icons-material';
import { useData } from '../context/useData';

// Use relative path in production, full URL in dev
const getApiUrl = () => {
  if (import.meta.env.VITE_API_BASE_URL) {
    return import.meta.env.VITE_API_BASE_URL;
  }
  if (typeof window !== 'undefined' && window.location) {
    return window.location.origin;
  }
  return '';
};
const API_URL = getApiUrl();

export default function AddNewProduct() {
  const navigate = useNavigate();
  const { allProducts, setProducts, reloadProducts } = useData();
  
  const [form, setForm] = useState({
    name: '',
    description: '',
    purpose: '',
    type: 'Analytics Data Product',
    domain: 'Commercial',
    region: 'Global',
    owner: '',
    certified: 'No',
    classification: 'Internal',
    gxp: 'Non-GXP',
    interval_of_change: 'Monthly',
    sub_domain: 'Commercial',
    databricks_url: '',
    tableau_url: '',
    qlik_url: '',
    data_contract_url: '',
    security_considerations: '',
    first_publish_date: new Date().toISOString().split('T')[0],
    next_reassessment_date: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    tags: ''
  });
  
  const [errors, setErrors] = useState({});
  const [loading, setLoading] = useState(false);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });

  const showSnackbar = (message, severity = 'success') => {
    setSnackbar({ open: true, message, severity });
  };

  const handleCloseSnackbar = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  const handleChange = (field, value) => {
    setForm(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    // Check required fields
    const requiredFields = ['name', 'description', 'type', 'domain', 'owner'];
    
    requiredFields.forEach(field => {
      if (!form[field] || form[field].toString().trim().length === 0) {
        newErrors[field] = `${field.charAt(0).toUpperCase() + field.slice(1)} is required`;
      }
    });
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async () => {
    if (!validateForm()) {
      showSnackbar('Please fill in all required fields', 'error');
      return;
    }

    setLoading(true);
    
    try {
      const currentDate = new Date().toISOString().split('T')[0];
      
      const productToAdd = {
        // ID will be auto-generated by the database
        name: form.name,
        description: form.description,
        purpose: form.purpose || form.description,
        type: form.type,
        domain: form.domain,
        region: form.region || 'Global',
        owner: form.owner,
        certified: form.certified || 'No',
        classification: form.classification || 'Internal',
        gxp: form.gxp || 'Non-GXP',
        interval_of_change: form.interval_of_change || 'Monthly',
        sub_domain: form.sub_domain || form.domain,
        databricks_url: form.databricks_url || '',
        tableau_url: form.tableau_url || '',
        qlik_url: form.qlik_url || '',
        data_contract_url: form.data_contract_url || '',
        security_considerations: form.security_considerations || '',
        first_publish_date: form.first_publish_date || currentDate,
        last_updated_date: currentDate,
        next_reassessment_date: form.next_reassessment_date || new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        tags: typeof form.tags === 'string' ? 
          form.tags.split(',').map(t => t.trim()).filter(Boolean) : 
          (Array.isArray(form.tags) ? form.tags : [])
      };

      console.log('Adding new product:', productToAdd);
      
      // Show loading message
      showSnackbar('Adding product...', 'info');
      
      // Make API call using POST to add single product
      const response = await fetch(`${API_URL}/api/data-products`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(productToAdd),
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('API Error Response:', errorText);
        
        // Handle specific error cases
        if (response.status === 403) {
          throw new Error('Access denied. Admin permissions required to add products.');
        }
        
        throw new Error(`HTTP error! status: ${response.status}, body: ${errorText}`);
      }
      
      const responseData = await response.json();
      console.log('Add product API response:', responseData);
      
      // Show success and navigate back
      showSnackbar('Product added successfully!', 'success');
      
      // Reload to ensure data consistency and get the auto-generated ID
      await reloadProducts();
      
      // Navigate back to authoring screen after a short delay
      setTimeout(() => {
        navigate('/authoring');
      }, 1500);
      
    } catch (error) {
      console.error('Error adding product:', error);
      showSnackbar('Failed to add product: ' + error.message, 'error');
      
      // Reload on error to ensure consistent state
      await reloadProducts();
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    navigate('/authoring');
  };

  // Field groups for better organization
  const fieldGroups = [
    {
      title: "Basic Information",
      fields: [
        { name: 'name', label: 'Product Name', required: true, type: 'text' },
        { name: 'description', label: 'Description', required: true, type: 'textarea' },
        { name: 'purpose', label: 'Purpose', required: false, type: 'textarea' },
        { name: 'type', label: 'Type', required: true, type: 'select', options: [
          'Analytics Data Product', 'AI/ML Model', 'Dashboard', 'API', 'Dataset', 'Report'
        ]}
      ]
    },
    {
      title: "Classification",
      fields: [
        { name: 'domain', label: 'Domain', required: true, type: 'select', options: [
          'Commercial', 'Clinical Research', 'Supply Chain', 'Drug Safety', 'Finance', 'HR', 'IT', 'R&D'
        ]},
        { name: 'sub_domain', label: 'Sub Domain', required: false, type: 'select', options: [
          'Commercial', 'Clinical Research', 'Supply Chain', 'Drug Safety', 'Finance', 'HR', 'IT', 'R&D'
        ]},
        { name: 'region', label: 'Region', required: false, type: 'select', options: [
          'Global', 'North America', 'Europe', 'Asia Pacific', 'Japan', 'Other'
        ]},
        { name: 'owner', label: 'Owner', required: true, type: 'text' },
        { name: 'certified', label: 'Certified', required: false, type: 'select', options: [
          'Yes', 'No', 'In Progress', 'Not Applicable'
        ]},
        { name: 'classification', label: 'Classification', required: false, type: 'select', options: [
          'Public', 'Internal', 'Confidential', 'Restricted'
        ]},
        { name: 'gxp', label: 'GXP', required: false, type: 'select', options: [
          'GXP', 'Non-GXP'
        ]}
      ]
    },
    {
      title: "Maintenance & Dates",
      fields: [
        { name: 'interval_of_change', label: 'Update Frequency', required: false, type: 'select', options: [
          'Real-time', 'Daily', 'Weekly', 'Monthly', 'Quarterly', 'Annually', 'Other'
        ]},
        { name: 'first_publish_date', label: 'First Publish Date', required: false, type: 'date' },
        { name: 'next_reassessment_date', label: 'Next Reassessment Date', required: false, type: 'date' },
        { name: 'security_considerations', label: 'Security Considerations', required: false, type: 'textarea' }
      ]
    },
    {
      title: "URLs & Links",
      fields: [
        { name: 'databricks_url', label: 'Databricks URL', required: false, type: 'text' },
        { name: 'tableau_url', label: 'Tableau URL', required: false, type: 'text' },
        { name: 'qlik_url', label: 'Qlik URL', required: false, type: 'text' },
        { name: 'data_contract_url', label: 'Data Contract URL', required: false, type: 'text' }
      ]
    },
    {
      title: "Tags",
      fields: [
        { name: 'tags', label: 'Tags (comma-separated)', required: false, type: 'textarea', placeholder: 'Analytics, Budget, Planning' }
      ]
    }
  ];

  const renderField = (field) => {
    const value = form[field.name] || '';
    const error = errors[field.name];

    switch (field.type) {
      case 'select':
        return (
          <FormControl fullWidth required={field.required} error={!!error}>
            <InputLabel>{field.label}</InputLabel>
            <Select
              value={value}
              onChange={(e) => handleChange(field.name, e.target.value)}
              label={field.label}
            >
              {field.options.map(option => (
                <MenuItem key={option} value={option}>{option}</MenuItem>
              ))}
            </Select>
            {error && <Typography variant="caption" color="error" sx={{ mt: 0.5 }}>{error}</Typography>}
          </FormControl>
        );
      
      case 'date':
        return (
          <TextField
            type="date"
            label={field.label}
            value={value}
            onChange={(e) => handleChange(field.name, e.target.value)}
            fullWidth
            required={field.required}
            error={!!error}
            helperText={error}
            InputLabelProps={{ shrink: true }}
          />
        );
      
      case 'textarea':
        return (
          <TextField
            label={field.label}
            value={value}
            onChange={(e) => handleChange(field.name, e.target.value)}
            fullWidth
            required={field.required}
            error={!!error}
            helperText={error}
            multiline
            rows={field.name === 'tags' ? 2 : 3}
            placeholder={field.placeholder}
          />
        );
      
      default:
        return (
          <TextField
            label={field.label}
            value={value}
            onChange={(e) => handleChange(field.name, e.target.value)}
            fullWidth
            required={field.required}
            error={!!error}
            helperText={error}
            placeholder={field.placeholder}
          />
        );
    }
  };

  return (
    <Box sx={{ p: 3, maxWidth: 1200, mx: 'auto' }}>
      {/* Header */}
      <Box sx={{ mb: 4 }}>
        <Typography variant="h4" component="h1" gutterBottom>
          Add New Data Product
        </Typography>
        <Typography variant="body1" color="text.secondary">
          Fill in the information below to create a new data product. Required fields are marked with an asterisk (*).
        </Typography>
      </Box>

      {/* Form */}
      <Paper elevation={1} sx={{ p: 4 }}>
        {fieldGroups.map((group, groupIndex) => (
          <Box key={group.title} sx={{ mb: 4 }}>
            <Typography 
              variant="h6" 
              sx={{ 
                mb: 3, 
                color: 'primary.main',
                borderBottom: '2px solid',
                borderColor: 'primary.main',
                pb: 1
              }}
            >
              {group.title}
            </Typography>
            
            <Grid container spacing={3}>
              {group.fields.map((field) => (
                <Grid 
                  item 
                  xs={12} 
                  md={
                    field.type === 'textarea' || field.name === 'tags' ? 12 : 6
                  } 
                  key={field.name}
                >
                  {renderField(field)}
                </Grid>
              ))}
            </Grid>
          </Box>
        ))}

        {/* Action Buttons */}
        <Box sx={{ mt: 4, display: 'flex', justifyContent: 'flex-end', gap: 2 }}>
          <Button
            variant="outlined"
            startIcon={<CancelIcon />}
            onClick={handleCancel}
            disabled={loading}
            size="large"
          >
            Cancel
          </Button>
          <Button
            variant="contained"
            startIcon={<SaveIcon />}
            onClick={handleSubmit}
            disabled={loading}
            size="large"
            sx={{ minWidth: 140 }}
          >
            {loading ? 'Adding...' : 'Add Product'}
          </Button>
        </Box>
      </Paper>

      {/* Snackbar for notifications */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      >
        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
}
